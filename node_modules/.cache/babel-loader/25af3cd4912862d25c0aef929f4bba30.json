{"ast":null,"code":"var _jsxFileName = \"/Users/andrei/SublimeWorkspace/final-project-globo-gym/src/components/MapContainer.js\";\nimport React, { Component } from \"react\";\nimport { Marker, Map, GoogleApiWrapper, StandaloneSearchBox } from \"google-maps-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class MapContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onMapReady = (mapProps, map) => {\n      //instantiate directions service and directions renderer\n      const directionsService = new this.props.google.maps.DirectionsService();\n      const directionsDisplay = new this.props.google.maps.DirectionsRenderer(); //put directions renderer to render in the map\n\n      directionsDisplay.setMap(map); //Getting the first coordinate in the array as the start/origin\n\n      let start = {\n        lat: this.state.coords[0].lat,\n        lng: this.state.coords[0].lng\n      }; //Getting the last coordinate in the array as the end/destination\n\n      let end = {\n        lat: this.state.coords[this.state.coords.length - 1].lat,\n        lng: this.state.coords[this.state.coords.length - 1].lng\n      }; //putting all the coordinates between the first and last coordinate from the array as the this.state.waypoints\n      //   for (let i = 1; i <this.state.coords.length - 1; i++) {\n      //     this.state.waypoints.push({\n      //       location: { lat:this.state.coords[i].lat, lng:this.state.coords[i].lng },\n      //       stopover: true,\n      //     });\n      //   }\n      // directions requests\n\n      let request = {\n        origin: start,\n        waypoints: this.state.waypoints,\n        destination: end,\n        travelMode: \"BICYCLING\"\n      }; //show results in the directionsrenderer\n\n      directionsService.route(request, function (result, status) {\n        if (status == \"OK\") {\n          directionsDisplay.setDirections(result);\n        }\n      }); //setting the autocomplete input\n\n      let card = document.getElementById(\"pac-card\");\n      let input = document.getElementById(\"pac-input\");\n      let card2 = document.getElementById(\"pac-card2\");\n      let input2 = document.getElementById(\"pac-input2\");\n      map.controls[this.props.google.maps.ControlPosition.TOP_CENTER].push(card);\n      map.controls[this.props.google.maps.ControlPosition.TOP_RIGHT].push(card2);\n      let autocomplete = new this.props.google.maps.places.Autocomplete(input);\n      let autocomplete2 = new this.props.google.maps.places.Autocomplete(input2); // Bind the map's bounds (viewport) property to the autocomplete object,\n      // so that the autocomplete requests use the current map bounds for the\n      // bounds option in the request.\n\n      autocomplete.bindTo(\"bounds\", map);\n      autocomplete2.bindTo(\"bounds\", map); // Set the data fields to return when the user selects a place.\n\n      autocomplete.setFields([\"address_components\", \"geometry\", \"icon\", \"name\"]);\n      autocomplete2.setFields([\"address_components\", \"geometry\", \"icon\", \"name\"]); //listener for the places input\n\n      autocomplete.addListener(\"place_changed\", () => {\n        console.log(this.state.waypoints);\n        let place = autocomplete.getPlace();\n\n        if (!place.geometry) {\n          // User entered the name of a Place that was not suggested and\n          // pressed the Enter key, or the Place Details request failed.\n          window.alert(\"No details available for input: '\" + place.name + \"'\");\n          return;\n        } //Putting the previous last coordinate in the array to be part of the waypoint\n        // this.state.waypoints.push({\n        //   location: {\n        //     lat:this.state.coords.length - 1].lat,\n        //     lng:this.state.coords.length - 1].lng,\n        //   },\n        //   stopover: true,\n        // });\n        //putting the Place Autocomplete coordinate result in thethis.state.coords array\n\n\n        this.state.coords[0] = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng()\n        }; // //putting the Place Autocomplete coordinate result the value of the end/destination\n        // end =this.state.coords[1];\n        //changing  request\n\n        request = {\n          origin: this.state.coords[0],\n          waypoints: this.state.waypoints,\n          destination: this.state.coords[1],\n          travelMode: \"BICYCLING\"\n        }; //creating new directions request\n\n        if (this.state.coords[0] !== null && this.state.coords[1] !== null) {\n          directionsService.route(request, function (result, status) {\n            if (status == \"OK\") {\n              directionsDisplay.setDirections(result);\n            }\n          });\n        }\n\n        ;\n      }); //listener for the places input\n\n      autocomplete2.addListener(\"place_changed\", () => {\n        console.log(this.state.waypoints);\n        let place = autocomplete2.getPlace();\n\n        if (!place.geometry) {\n          // User entered the name of a Place that was not suggested and\n          // pressed the Enter key, or the Place Details request failed.\n          window.alert(\"No details available for input: '\" + place.name + \"'\");\n          return;\n        } //Putting the previous last coordinate in the array to be part of the waypoint\n        // this.state.waypoints.push({\n        //   location: {\n        //     lat:this.state.coords.length - 1].lat,\n        //     lng:this.state.coords.length - 1].lng,\n        //   },\n        //   stopover: true,\n        // });\n        //putting the Place Autocomplete coordinate result in thethis.state.coords array\n\n\n        this.state.coords[1] = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng()\n        }; // //putting the Place Autocomplete coordinate result the value of the end/destination\n        // end =this.state.coords[1];\n        //changing  request\n\n        request = {\n          origin: this.state.coords[0],\n          waypoints: this.state.waypoints,\n          destination: this.state.coords[1],\n          travelMode: \"BICYCLING\"\n        }; //creating new directions request\n\n        if (this.state.coords[0] !== null && this.state.coords[1] !== null) {\n          directionsService.route(request, function (result, status) {\n            if (status == \"OK\") {\n              directionsDisplay.setDirections(result);\n            }\n          });\n        }\n      });\n    };\n\n    this.onMapClick = (t, map, coord) => {\n      const lat1 = coord.latLng.lat();\n      const lng1 = coord.latLng.lng();\n\n      if (this.state.coords[2].lat !== null && this.state.coords[3].lat !== null) {\n        this.state.coords[2] = {\n          lat: lat1,\n          lng: lng1\n        };\n        this.state.coords[3] = {\n          lat: null,\n          lng: null\n        };\n      } else if (this.state.coords[2].lat !== null && this.state.coords[3].lat === null) {\n        this.state.coords[3] = {\n          lat: lat1,\n          lng: lng1\n        };\n      }\n\n      ;\n    };\n\n    this.state = {\n      coords: [{\n        name: \"Manila\",\n        title: \"Manila\",\n        lat: 42.356276,\n        lng: -71.096876,\n        id: 1\n      }, {\n        name: \"Taguig\",\n        title: \"Taguig\",\n        lat: 42.348310,\n        lng: -71.081311,\n        id: 3\n      }],\n      waypoints: [],\n      markers: []\n    };\n  }\n\n  render() {\n    //if (!this.props.loaded) return <div>Loading...</div>;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Map, {\n        className: \"map\",\n        initialCenter: {\n          lat: 14.6091,\n          lng: 121.0223\n        },\n        google: this.props.google,\n        onClick: this.onMapClick,\n        onReady: this.onMapReady,\n        style: {\n          height: \"100%\",\n          position: \"relative\",\n          width: \"100%\"\n        },\n        zoom: 8,\n        children: this.props.markers.map(marker => /*#__PURE__*/_jsxDEV(Marker, { ...marker,\n          onRightClick: () => this.props.onMarkerRightClick(marker)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pac-card\",\n        id: \"pac-card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"title\",\n            children: \"Add new point\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"pac-container\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"pac-input\",\n              type: \"text\",\n              placeholder: \"Enter a location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pac-card\",\n        id: \"pac-card2\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"title2\",\n            children: \"Add new point\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"pac-container2\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"pac-input2\",\n              type: \"text\",\n              placeholder: \"Enter a location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: 500,\n          height: 500\n        },\n        id: this.props.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"infowindow-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"\",\n          width: \"16\",\n          height: \"16\",\n          id: \"place-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"place-name\",\n          className: \"title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"place-address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"place-coord\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }, this);\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyBAVWVu8_U0FfwgBiHVN3q-G5uCQNBAj7Y'\n})(MapContainer);","map":{"version":3,"sources":["/Users/andrei/SublimeWorkspace/final-project-globo-gym/src/components/MapContainer.js"],"names":["React","Component","Marker","Map","GoogleApiWrapper","StandaloneSearchBox","MapContainer","constructor","props","onMapReady","mapProps","map","directionsService","google","maps","DirectionsService","directionsDisplay","DirectionsRenderer","setMap","start","lat","state","coords","lng","end","length","request","origin","waypoints","destination","travelMode","route","result","status","setDirections","card","document","getElementById","input","card2","input2","controls","ControlPosition","TOP_CENTER","push","TOP_RIGHT","autocomplete","places","Autocomplete","autocomplete2","bindTo","setFields","addListener","console","log","place","getPlace","geometry","window","alert","name","location","onMapClick","t","coord","lat1","latLng","lng1","title","id","markers","render","height","position","width","marker","onMarkerRightClick","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Marker, Map, GoogleApiWrapper, StandaloneSearchBox } from \"google-maps-react\";\n\n\nexport class MapContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n     coords : [ {\n          name: \"Manila\",\n          title: \"Manila\",\n          lat: 42.356276,\n          lng: -71.096876,\n          id: 1,\n        },\n        {\n            name: \"Taguig\",\n            title: \"Taguig\",\n            lat: 42.348310,\n            lng: -71.081311,\n            id: 3,\n        },\n      ],\n      waypoints : [],\n      markers: [],\n    };\n  }\n    onMapReady = (mapProps, map) => {\n      \n  \n      //instantiate directions service and directions renderer\n      const directionsService = new this.props.google.maps.DirectionsService();\n      const directionsDisplay = new this.props.google.maps.DirectionsRenderer();\n      //put directions renderer to render in the map\n      directionsDisplay.setMap(map);\n      //Getting the first coordinate in the array as the start/origin\n      let start = { lat:this.state.coords[0].lat, lng:this.state.coords[0].lng };\n      //Getting the last coordinate in the array as the end/destination\n      let end = {\n        lat: this.state.coords[this.state.coords.length - 1].lat,\n        lng: this.state.coords[this.state.coords.length - 1].lng,\n      };\n      \n      //putting all the coordinates between the first and last coordinate from the array as the this.state.waypoints\n    //   for (let i = 1; i <this.state.coords.length - 1; i++) {\n    //     this.state.waypoints.push({\n    //       location: { lat:this.state.coords[i].lat, lng:this.state.coords[i].lng },\n    //       stopover: true,\n    //     });\n    //   }\n  \n      // directions requests\n  \n      let request = {\n        origin: start,\n        waypoints: this.state.waypoints,\n        destination: end,\n        travelMode: \"BICYCLING\",\n      };\n\n      //show results in the directionsrenderer\n      directionsService.route(request, function (result, status) {\n        if (status == \"OK\") {\n          directionsDisplay.setDirections(result);\n        }\n      });\n\n      //setting the autocomplete input\n      let card = document.getElementById(\"pac-card\");\n      let input = document.getElementById(\"pac-input\");\n      let card2 = document.getElementById(\"pac-card2\");\n      let input2 = document.getElementById(\"pac-input2\");\n      map.controls[this.props.google.maps.ControlPosition.TOP_CENTER].push(card);\n      map.controls[this.props.google.maps.ControlPosition.TOP_RIGHT].push(card2);\n      let autocomplete = new this.props.google.maps.places.Autocomplete(input);\n      let autocomplete2 = new this.props.google.maps.places.Autocomplete(input2);\n  \n      // Bind the map's bounds (viewport) property to the autocomplete object,\n      // so that the autocomplete requests use the current map bounds for the\n      // bounds option in the request.\n      autocomplete.bindTo(\"bounds\", map);\n      autocomplete2.bindTo(\"bounds\", map);\n  \n      // Set the data fields to return when the user selects a place.\n      autocomplete.setFields([\"address_components\", \"geometry\", \"icon\", \"name\"]);\n      autocomplete2.setFields([\"address_components\", \"geometry\", \"icon\", \"name\"]);\n\n      //listener for the places input\n      autocomplete.addListener(\"place_changed\", () => {\n        console.log(this.state.waypoints);\n        let place = autocomplete.getPlace();\n        if (!place.geometry) {\n          // User entered the name of a Place that was not suggested and\n          // pressed the Enter key, or the Place Details request failed.\n          window.alert(\"No details available for input: '\" + place.name + \"'\");\n          return;\n        }\n        \n        //Putting the previous last coordinate in the array to be part of the waypoint\n        // this.state.waypoints.push({\n        //   location: {\n        //     lat:this.state.coords.length - 1].lat,\n        //     lng:this.state.coords.length - 1].lng,\n        //   },\n        //   stopover: true,\n        // });\n  \n        //putting the Place Autocomplete coordinate result in thethis.state.coords array\n       this.state.coords[0] = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng(),\n        };\n        // //putting the Place Autocomplete coordinate result the value of the end/destination\n        // end =this.state.coords[1];\n        \n        //changing  request\n        request = {\n          origin:this.state.coords[0],\n          waypoints: this.state.waypoints,\n          destination:this.state.coords[1],\n          travelMode: \"BICYCLING\",\n        };\n        //creating new directions request\n        if (this.state.coords[0] !== null &&this.state.coords[1] !== null) {\n            directionsService.route(request, function (result, status) {\n                if (status == \"OK\") {\n                    directionsDisplay.setDirections(result);\n                }\n            });\n        };\n\n\n      });\n\n  \n\n      \n\n    //listener for the places input\n    autocomplete2.addListener(\"place_changed\", () => {\n        console.log(this.state.waypoints);\n        let place = autocomplete2.getPlace();\n        if (!place.geometry) {\n          // User entered the name of a Place that was not suggested and\n          // pressed the Enter key, or the Place Details request failed.\n          window.alert(\"No details available for input: '\" + place.name + \"'\");\n          return;\n        }\n        \n        //Putting the previous last coordinate in the array to be part of the waypoint\n        // this.state.waypoints.push({\n        //   location: {\n        //     lat:this.state.coords.length - 1].lat,\n        //     lng:this.state.coords.length - 1].lng,\n        //   },\n        //   stopover: true,\n        // });\n  \n        //putting the Place Autocomplete coordinate result in thethis.state.coords array\n       this.state.coords[1] = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng(),\n        };\n        // //putting the Place Autocomplete coordinate result the value of the end/destination\n        // end =this.state.coords[1];\n        \n        //changing  request\n        request = {\n          origin:this.state.coords[0],\n          waypoints: this.state.waypoints,\n          destination:this.state.coords[1],\n          travelMode: \"BICYCLING\",\n        };\n        //creating new directions request\n        if (this.state.coords[0] !== null &&this.state.coords[1] !== null) {\n            directionsService.route(request, function (result, status) {\n                if (status == \"OK\") {\n                    directionsDisplay.setDirections(result);\n                }\n            });\n        }\n      });\n    };\n\n    onMapClick = (t, map, coord) => {\n        const lat1 = coord.latLng.lat();\n        const lng1 = coord.latLng.lng();\n        if(this.state.coords[2].lat !== null &&this.state.coords[3].lat !== null){\n         this.state.coords[2] = {\n            lat: lat1,\n            lng: lng1,\n          };\n         this.state.coords[3] = {\n            lat: null,\n            lng: null,\n          };\n        }\n        else if(this.state.coords[2].lat !== null &&this.state.coords[3].lat === null){\n         this.state.coords[3] = {\n            lat: lat1,\n            lng: lng1,\n          };\n\n\n        };\n    };\n  \n  \n    render() {\n      //if (!this.props.loaded) return <div>Loading...</div>;\n  \n      return (\n        <div>\n          <Map\n            className=\"map\"\n            initialCenter={{ lat: 14.6091, lng: 121.0223 }}\n            google={this.props.google}\n            onClick={this.onMapClick}\n            onReady={this.onMapReady}\n            style={{ height: \"100%\", position: \"relative\", width: \"100%\" }}\n            zoom={8}\n          >\n                      {this.props.markers.map(marker => (\n            <Marker\n              {...marker}\n              onRightClick={() => this.props.onMarkerRightClick(marker)}\n            />\n          ))}</Map>\n          <div className=\"pac-card\" id=\"pac-card\">\n            <div>\n              <div id=\"title\">Add new point</div>\n  \n              <div id=\"pac-container\">\n                <input\n                  id=\"pac-input\"\n                  type=\"text\"\n                  placeholder=\"Enter a location\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"pac-card\" id=\"pac-card2\">\n            <div>\n              <div id=\"title2\">Add new point</div>\n  \n              <div id=\"pac-container2\">\n                <input\n                  id=\"pac-input2\"\n                  type=\"text\"\n                  placeholder=\"Enter a location\"\n                />\n              </div>\n            </div>\n          </div>\n          <div style={{ width: 500, height: 500 }} id={this.props.id} />\n          <div id=\"infowindow-content\">\n            <img src=\"\" width=\"16\" height=\"16\" id=\"place-icon\" />\n            <span id=\"place-name\" className=\"title\"></span>\n            <br />\n            <span id=\"place-address\"></span>\n            <br />\n            <span id=\"place-coord\"></span>\n          </div>\n        </div>\n      );\n    }\n  }\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyBAVWVu8_U0FfwgBiHVN3q-G5uCQNBAj7Y'\n})(MapContainer);"]},"metadata":{},"sourceType":"module"}