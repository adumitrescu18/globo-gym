{"ast":null,"code":"var _jsxFileName = \"/Users/andrei/SublimeWorkspace/final-project-globo-gym/src/components/MapContainer.js\";\nimport React, { Component } from \"react\";\nimport { Marker, Map, GoogleApiWrapper, StandaloneSearchBox } from \"google-maps-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class MapContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onMapReady = (mapProps, map) => {\n      //instantiate directions service and directions renderer\n      const directionsService = new this.props.google.maps.DirectionsService();\n      const directionsDisplay = new this.props.google.maps.DirectionsRenderer(); //put directions renderer to render in the map\n\n      directionsDisplay.setMap(map); //Getting the first coordinate in the array as the start/origin\n\n      let start = {\n        lat: this.state.coords[0].lat,\n        lng: this.state.coords[0].lng\n      }; //Getting the last coordinate in the array as the end/destination\n\n      let end = {\n        lat: this.state.coords[this.state.coords.length - 1].lat,\n        lng: this.state.coords[this.state.coords.length - 1].lng\n      }; // directions requests\n\n      let request = {\n        origin: start,\n        waypoints: this.state.waypoints,\n        destination: end,\n        travelMode: \"BICYCLING\"\n      }; //show results in the directionsrenderer\n\n      directionsService.route(request, function (result, status) {\n        if (status == \"OK\") {\n          directionsDisplay.setDirections(result);\n        }\n      }); //setting the autocomplete input\n\n      let card = document.getElementById(\"start-of-route-container\");\n      let input = document.getElementById(\"start-of-route\");\n      let card2 = document.getElementById(\"end-of-route-container\");\n      let input2 = document.getElementById(\"end-of-route\");\n      map.controls[this.props.google.maps.ControlPosition.TOP_LEFT].push(card);\n      map.controls[this.props.google.maps.ControlPosition.TOP_RIGHT].push(card2);\n      let autocomplete = new this.props.google.maps.places.Autocomplete(input);\n      let autocomplete2 = new this.props.google.maps.places.Autocomplete(input2); // Bind the map's bounds (viewport) property to the autocomplete object,\n      // so that the autocomplete requests use the current map bounds for the\n      // bounds option in the request.\n\n      autocomplete.bindTo(\"bounds\", map);\n      autocomplete2.bindTo(\"bounds\", map); // Set the data fields to return when the user selects a place.\n\n      autocomplete.setFields([\"address_components\", \"geometry\", \"icon\", \"name\"]);\n      autocomplete2.setFields([\"address_components\", \"geometry\", \"icon\", \"name\"]); //listener for the places input\n\n      autocomplete.addListener(\"place_changed\", () => {\n        console.log(this.state.waypoints);\n        let place = autocomplete.getPlace();\n\n        if (!place.geometry) {\n          // User entered the name of a Place that was not suggested and\n          // pressed the Enter key, or the Place Details request failed.\n          window.alert(\"No details available for input: '\" + place.name + \"'\");\n          return;\n        } //putting the Place Autocomplete coordinate result in thethis.state.coords array\n\n\n        this.state.coords[0] = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng()\n        }; // //putting the Place Autocomplete coordinate result the value of the end/destination\n        // end =this.state.coords[1];\n        //changing  request\n\n        request = {\n          origin: this.state.coords[0],\n          waypoints: this.state.waypoints,\n          destination: this.state.coords[1],\n          travelMode: \"BICYCLING\"\n        };\n        const tempwaypoints = [this.state.coords[0], this.state.coords[1]];\n        const serverParams = {\n          \"creator\": \"Andrei\",\n          \"waypoints\": tempwaypoints,\n          \"description\": \"daily walk\"\n        };\n        console.log(this.state.waypoints);\n        const serverRequest = {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(serverParams)\n        }; //creating new directions request\n\n        if (this.state.coords[0] !== null && this.state.coords[1] !== null) {\n          directionsService.route(request, function (result, status) {\n            if (status == \"OK\") {\n              directionsDisplay.setDirections(result);\n            }\n          });\n          let response;\n          fetch(\"http://localhost:8080/api/routes\", serverRequest).then(response => response = response.json()).then(data => console.log(data));\n        }\n\n        ;\n      }); //listener for the places input\n\n      autocomplete2.addListener(\"place_changed\", () => {\n        console.log(this.state.waypoints);\n        let place = autocomplete2.getPlace();\n\n        if (!place.geometry) {\n          // User entered the name of a Place that was not suggested and\n          // pressed the Enter key, or the Place Details request failed.\n          window.alert(\"No details available for input: '\" + place.name + \"'\");\n          return;\n        } //putting the Place Autocomplete coordinate result in thethis.state.coords array\n\n\n        this.state.coords[1] = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng()\n        }; // //putting the Place Autocomplete coordinate result the value of the end/destination\n        // end =this.state.coords[1];\n        //changing  request\n\n        request = {\n          origin: this.state.coords[0],\n          waypoints: this.state.waypoints,\n          destination: this.state.coords[1],\n          travelMode: \"BICYCLING\"\n        };\n        const tempWaypoints = [this.state.coords[0], this.state.coords[1]];\n        const serverParams = {\n          \"creator\": \"Andrei\",\n          \"waypoints\": tempWaypoints,\n          \"description\": \"daily walk\"\n        };\n        const serverRequest = {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(serverParams)\n        }; //creating new directions request\n\n        if (this.state.coords[0] !== null && this.state.coords[1] !== null) {\n          directionsService.route(request, function (result, status) {\n            if (status == \"OK\") {\n              directionsDisplay.setDirections(result);\n            }\n          });\n          fetch(\"http://localhost:8080/api/routes\", serverRequest).then(response => response.json()).then(data => console.log(\"andrei\", data));\n        }\n      });\n    };\n\n    this.state = {\n      coords: [{\n        name: \"Manila\",\n        title: \"Manila\",\n        lat: 42.356276,\n        lng: -71.096876,\n        id: 1\n      }, {\n        name: \"Taguig\",\n        title: \"Taguig\",\n        lat: 42.348310,\n        lng: -71.081311,\n        id: 3\n      }],\n      waypoints: [],\n      markers: [{\n        position: {\n          lat: 42.35145685793806,\n          lng: -71.08308446678757\n        }\n      }]\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"nav-bar-address\",\n        id: \"start-of-route-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn btn-outline-success my-2 my-sm-0\",\n          type: \"submit\",\n          style: {\n            height: \"50px\"\n          },\n          children: \"From\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          class: \"form-control mr-sm-2\",\n          id: \"start-of-route\",\n          type: \"search\",\n          placeholder: \"Address\",\n          \"aria-label\": \"Search\",\n          style: {\n            height: \"50px\",\n            width: \"500px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"nav-bar-address\",\n        id: \"end-of-route-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn btn-outline-success my-2 my-sm-0\",\n          type: \"submit\",\n          style: {\n            height: \"50px\"\n          },\n          children: \"To\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          class: \"form-control mr-sm-2\",\n          id: \"end-of-route\",\n          type: \"search\",\n          placeholder: \"Address\",\n          \"aria-label\": \"Search\",\n          style: {\n            height: \"50px\",\n            width: \"500px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Map, {\n        className: \"map\",\n        initialCenter: {\n          lat: 14.6091,\n          lng: 121.0223\n        },\n        google: this.props.google,\n        onClick: this.onMapClick,\n        onReady: this.onMapReady,\n        style: {\n          width: \"85%\",\n          height: \"100%\",\n          position: \"fixed\"\n        },\n        containerStyle: {\n          position: \"fixed\",\n          width: \"100%\",\n          height: \"100%\",\n          marginTop: \"0vh\"\n        },\n        zoom: 7\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: 500,\n          height: 500\n        },\n        id: this.props.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"infowindow-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"\",\n          width: \"16\",\n          height: \"16\",\n          id: \"place-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"place-name\",\n          className: \"title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"place-address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"place-coord\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }, this);\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyBAVWVu8_U0FfwgBiHVN3q-G5uCQNBAj7Y'\n})(MapContainer);","map":{"version":3,"sources":["/Users/andrei/SublimeWorkspace/final-project-globo-gym/src/components/MapContainer.js"],"names":["React","Component","Marker","Map","GoogleApiWrapper","StandaloneSearchBox","MapContainer","constructor","props","onMapReady","mapProps","map","directionsService","google","maps","DirectionsService","directionsDisplay","DirectionsRenderer","setMap","start","lat","state","coords","lng","end","length","request","origin","waypoints","destination","travelMode","route","result","status","setDirections","card","document","getElementById","input","card2","input2","controls","ControlPosition","TOP_LEFT","push","TOP_RIGHT","autocomplete","places","Autocomplete","autocomplete2","bindTo","setFields","addListener","console","log","place","getPlace","geometry","window","alert","name","location","tempwaypoints","serverParams","serverRequest","method","headers","body","JSON","stringify","response","fetch","then","json","data","tempWaypoints","title","id","markers","position","render","height","width","onMapClick","marginTop","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Marker, Map, GoogleApiWrapper, StandaloneSearchBox } from \"google-maps-react\";\n\nexport class MapContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n     coords : [ {\n          name: \"Manila\",\n          title: \"Manila\",\n          lat: 42.356276,\n          lng: -71.096876,\n          id: 1,\n        },\n        {\n            name: \"Taguig\",\n            title: \"Taguig\",\n            lat: 42.348310,\n            lng: -71.081311,\n            id: 3,\n        },\n      ],\n      waypoints : [],\n      markers: [{\n          position:{\n            lat: 42.35145685793806,\n            lng: -71.08308446678757,\n          }\n        },\n      ],\n    };\n  }\n    onMapReady = (mapProps, map) => {\n      \n  \n      //instantiate directions service and directions renderer\n      const directionsService = new this.props.google.maps.DirectionsService();\n      const directionsDisplay = new this.props.google.maps.DirectionsRenderer();\n      //put directions renderer to render in the map\n      directionsDisplay.setMap(map);\n      //Getting the first coordinate in the array as the start/origin\n      let start = { lat:this.state.coords[0].lat, lng:this.state.coords[0].lng };\n      //Getting the last coordinate in the array as the end/destination\n      let end = {\n        lat: this.state.coords[this.state.coords.length - 1].lat,\n        lng: this.state.coords[this.state.coords.length - 1].lng,\n      };\n  \n      // directions requests\n  \n      let request = {\n        origin: start,\n        waypoints: this.state.waypoints,\n        destination: end,\n        travelMode: \"BICYCLING\",\n      };\n\n      //show results in the directionsrenderer\n      directionsService.route(request, function (result, status) {\n        if (status == \"OK\") {\n          directionsDisplay.setDirections(result);\n        }\n      });\n\n      //setting the autocomplete input\n      let card = document.getElementById(\"start-of-route-container\");\n      let input = document.getElementById(\"start-of-route\");\n      let card2 = document.getElementById(\"end-of-route-container\");\n      let input2 = document.getElementById(\"end-of-route\");\n      map.controls[this.props.google.maps.ControlPosition.TOP_LEFT].push(card);\n      map.controls[this.props.google.maps.ControlPosition.TOP_RIGHT].push(card2);\n      let autocomplete = new this.props.google.maps.places.Autocomplete(input);\n      let autocomplete2 = new this.props.google.maps.places.Autocomplete(input2);\n  \n      // Bind the map's bounds (viewport) property to the autocomplete object,\n      // so that the autocomplete requests use the current map bounds for the\n      // bounds option in the request.\n      autocomplete.bindTo(\"bounds\", map);\n      autocomplete2.bindTo(\"bounds\", map);\n  \n      // Set the data fields to return when the user selects a place.\n      autocomplete.setFields([\"address_components\", \"geometry\", \"icon\", \"name\"]);\n      autocomplete2.setFields([\"address_components\", \"geometry\", \"icon\", \"name\"]);\n\n      //listener for the places input\n      autocomplete.addListener(\"place_changed\", () => {\n        console.log(this.state.waypoints);\n        let place = autocomplete.getPlace();\n        if (!place.geometry) {\n          // User entered the name of a Place that was not suggested and\n          // pressed the Enter key, or the Place Details request failed.\n          window.alert(\"No details available for input: '\" + place.name + \"'\");\n          return;\n        }\n  \n        //putting the Place Autocomplete coordinate result in thethis.state.coords array\n       this.state.coords[0] = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng(),\n        };\n        // //putting the Place Autocomplete coordinate result the value of the end/destination\n        // end =this.state.coords[1];\n        \n        //changing  request\n        request = {\n          origin:this.state.coords[0],\n          waypoints: this.state.waypoints,\n          destination:this.state.coords[1],\n          travelMode: \"BICYCLING\",\n        };\n        const tempwaypoints = [this.state.coords[0], this.state.coords[1]];\n        const serverParams = {\n          \"creator\" : \"Andrei\",\n          \"waypoints\" : tempwaypoints,\n          \"description\" : \"daily walk\"\n\n        }\n        console.log(this.state.waypoints)\n        const serverRequest = {\n          method : \"POST\",\n          headers: { 'Content-Type': 'application/json' },\n          body : JSON.stringify(serverParams)\n\n        }\n        //creating new directions request\n        if (this.state.coords[0] !== null &&this.state.coords[1] !== null) {\n            directionsService.route(request, function (result, status) {\n                if (status == \"OK\") {\n                    directionsDisplay.setDirections(result);\n                }\n            });\n            let response;\n            fetch(\"http://localhost:8080/api/routes\", serverRequest)\n              .then(response => response = response.json())\n              .then(data => console.log(data));\n\n\n        };\n\n\n      });\n\n  \n\n      \n\n    //listener for the places input\n    autocomplete2.addListener(\"place_changed\", () => {\n        console.log(this.state.waypoints);\n        let place = autocomplete2.getPlace();\n        if (!place.geometry) {\n          // User entered the name of a Place that was not suggested and\n          // pressed the Enter key, or the Place Details request failed.\n          window.alert(\"No details available for input: '\" + place.name + \"'\");\n          return;\n        }\n  \n        //putting the Place Autocomplete coordinate result in thethis.state.coords array\n       this.state.coords[1] = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng(),\n        };\n        // //putting the Place Autocomplete coordinate result the value of the end/destination\n        // end =this.state.coords[1];\n        \n        //changing  request\n        request = {\n          origin:this.state.coords[0],\n          waypoints: this.state.waypoints,\n          destination:this.state.coords[1],\n          travelMode: \"BICYCLING\",\n        };\n        const tempWaypoints = [this.state.coords[0], this.state.coords[1]];\n        const serverParams = {\n          \"creator\" : \"Andrei\",\n          \"waypoints\" : tempWaypoints,\n          \"description\" : \"daily walk\"\n        }\n        const serverRequest = {\n          method : \"POST\",\n          headers: { 'Content-Type': 'application/json' },\n          body : JSON.stringify(serverParams)\n\n        }\n        //creating new directions request\n        if (this.state.coords[0] !== null &&this.state.coords[1] !== null) {\n            directionsService.route(request, function (result, status) {\n                if (status == \"OK\") {\n                    directionsDisplay.setDirections(result);\n                }\n            });\n            fetch(\"http://localhost:8080/api/routes\", serverRequest)\n              .then(response => response.json())\n              .then(data => console.log(\"andrei\", data))\n        }\n      });\n    };\n  \n  \n    render() {\n  \n      return (\n        <div>\n          <form className=\"nav-bar-address\" id=\"start-of-route-container\">\n              <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\" style={{ height: \"50px\"}}>From</button>\n              <input class=\"form-control mr-sm-2\" id=\"start-of-route\" type=\"search\" placeholder=\"Address\" aria-label=\"Search\" style={{height: \"50px\", width: \"500px\"}}></input>\n            </form>\n            <form className=\"nav-bar-address\" id=\"end-of-route-container\">\n              <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\" style={{ height: \"50px\"}}>To</button>\n              <input class=\"form-control mr-sm-2\" id=\"end-of-route\" type=\"search\" placeholder=\"Address\" aria-label=\"Search\" style={{height: \"50px\", width: \"500px\"}}></input>\n          </form>\n          <Map\n            className=\"map\"\n            initialCenter={{ lat: 14.6091, lng: 121.0223 }}\n            google={this.props.google}\n            onClick={this.onMapClick}\n            onReady={this.onMapReady}\n            style={{width: \"85%\", height: \"100%\", position: \"fixed\"}}\n            containerStyle={{position: \"fixed\", width: \"100%\", height:\"100%\", marginTop:\"0vh\"}}\n            zoom={7}\n          >\n          </Map>\n          <div style={{ width: 500, height: 500 }} id={this.props.id} />\n          <div id=\"infowindow-content\">\n            <img src=\"\" width=\"16\" height=\"16\" id=\"place-icon\" />\n            <span id=\"place-name\" className=\"title\"></span>\n            <br />\n            <span id=\"place-address\"></span>\n            <br />\n            <span id=\"place-coord\"></span>\n          </div>\n        </div>\n      );\n    }\n  }\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyBAVWVu8_U0FfwgBiHVN3q-G5uCQNBAj7Y'\n})(MapContainer);"]},"metadata":{},"sourceType":"module"}