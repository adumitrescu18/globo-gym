{"ast":null,"code":"var _jsxFileName = \"/Users/andrei/SublimeWorkspace/final-project-globo-gym/src/components/MapContainer.js\";\nimport React, { Component } from \"react\";\nimport { Map, GoogleApiWrapper, StandaloneSearchBox } from \"google-maps-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class MapContainer extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.onMapReady = (mapProps, map) => {\n      let coords = [{\n        name: \"Manila\",\n        title: \"Manila\",\n        lat: 42.356276,\n        lng: -71.096876,\n        id: 1\n      }, {\n        name: \"Taguig\",\n        title: \"Taguig\",\n        lat: 42.348310,\n        lng: -71.081311,\n        id: 3\n      }];\n      let waypoints = []; //instantiate directions service and directions renderer\n\n      const directionsService = new this.props.google.maps.DirectionsService();\n      const directionsDisplay = new this.props.google.maps.DirectionsRenderer(); //put directions renderer to render in the map\n\n      directionsDisplay.setMap(map); //Getting the first coordinate in the array as the start/origin\n\n      let start = {\n        lat: coords[0].lat,\n        lng: coords[0].lng\n      }; //Getting the last coordinate in the array as the end/destination\n\n      let end = {\n        lat: coords[coords.length - 1].lat,\n        lng: coords[coords.length - 1].lng\n      }; //putting all the coordinates between the first and last coordinate from the array as the waypoints\n      //   for (let i = 1; i < coords.length - 1; i++) {\n      //     waypoints.push({\n      //       location: { lat: coords[i].lat, lng: coords[i].lng },\n      //       stopover: true,\n      //     });\n      //   }\n      // directions requests\n\n      let request = {\n        origin: start,\n        waypoints: waypoints,\n        destination: end,\n        travelMode: \"BICYCLING\"\n      }; //show results in the directionsrenderer\n\n      directionsService.route(request, function (result, status) {\n        if (status == \"OK\") {\n          directionsDisplay.setDirections(result);\n        }\n      }); //setting the autocomplete input\n\n      let card = document.getElementById(\"pac-card\");\n      let input = document.getElementById(\"pac-input\");\n      let card2 = document.getElementById(\"pac-card2\");\n      let input2 = document.getElementById(\"pac-input2\");\n      map.controls[this.props.google.maps.ControlPosition.TOP_CENTER].push(card);\n      map.controls[this.props.google.maps.ControlPosition.TOP_RIGHT].push(card2);\n      let autocomplete = new this.props.google.maps.places.Autocomplete(input);\n      let autocomplete2 = new this.props.google.maps.places.Autocomplete(input2); // Bind the map's bounds (viewport) property to the autocomplete object,\n      // so that the autocomplete requests use the current map bounds for the\n      // bounds option in the request.\n\n      autocomplete.bindTo(\"bounds\", map);\n      autocomplete2.bindTo(\"bounds\", map); // Set the data fields to return when the user selects a place.\n\n      autocomplete.setFields([\"address_components\", \"geometry\", \"icon\", \"name\"]);\n      autocomplete2.setFields([\"address_components\", \"geometry\", \"icon\", \"name\"]); //listener for the places input\n\n      autocomplete.addListener(\"place_changed\", () => {\n        console.log(waypoints);\n        let place = autocomplete.getPlace();\n\n        if (!place.geometry) {\n          // User entered the name of a Place that was not suggested and\n          // pressed the Enter key, or the Place Details request failed.\n          window.alert(\"No details available for input: '\" + place.name + \"'\");\n          return;\n        } //Putting the previous last coordinate in the array to be part of the waypoint\n        // waypoints.push({\n        //   location: {\n        //     lat: coords[coords.length - 1].lat,\n        //     lng: coords[coords.length - 1].lng,\n        //   },\n        //   stopover: true,\n        // });\n        //putting the Place Autocomplete coordinate result in the coords array\n\n\n        coords[0] = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng()\n        }; // //putting the Place Autocomplete coordinate result the value of the end/destination\n        // end = coords[1];\n        //changing  request\n\n        request = {\n          origin: coords[0],\n          waypoints: waypoints,\n          destination: coords[1],\n          travelMode: \"BICYCLING\"\n        }; //creating new directions request\n\n        if (coords[0] !== null && coords[1] !== null) {\n          directionsService.route(request, function (result, status) {\n            if (status == \"OK\") {\n              directionsDisplay.setDirections(result);\n            }\n          });\n        }\n\n        ;\n      });\n\n      this.onMapClick = (t, map, coord) => {\n        const {\n          latLng\n        } = coord;\n        const lat1 = latLng.lat();\n        const lng1 = latLng.lng();\n\n        if (coords[2].lat !== null && coords[3].lat !== null) {\n          coords[2] = {\n            lat: lat1,\n            lng: lng1\n          };\n          coords[3] = {\n            lat: null,\n            lng: null\n          };\n        } else if (coords[2].lat !== null && coords[3].lat === null) {\n          coords[3] = {\n            lat: lat1,\n            lng: lng1\n          };\n        }\n\n        ;\n      }; //listener for the places input\n\n\n      autocomplete2.addListener(\"place_changed\", () => {\n        console.log(waypoints);\n        let place = autocomplete2.getPlace();\n\n        if (!place.geometry) {\n          // User entered the name of a Place that was not suggested and\n          // pressed the Enter key, or the Place Details request failed.\n          window.alert(\"No details available for input: '\" + place.name + \"'\");\n          return;\n        } //Putting the previous last coordinate in the array to be part of the waypoint\n        // waypoints.push({\n        //   location: {\n        //     lat: coords[coords.length - 1].lat,\n        //     lng: coords[coords.length - 1].lng,\n        //   },\n        //   stopover: true,\n        // });\n        //putting the Place Autocomplete coordinate result in the coords array\n\n\n        coords[1] = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng()\n        }; // //putting the Place Autocomplete coordinate result the value of the end/destination\n        // end = coords[1];\n        //changing  request\n\n        request = {\n          origin: coords[0],\n          waypoints: waypoints,\n          destination: coords[1],\n          travelMode: \"BICYCLING\"\n        }; //creating new directions request\n\n        if (coords[0] !== null && coords[1] !== null) {\n          directionsService.route(request, function (result, status) {\n            if (status == \"OK\") {\n              directionsDisplay.setDirections(result);\n            }\n          });\n        }\n      });\n    };\n  }\n\n  render() {\n    //if (!this.props.loaded) return <div>Loading...</div>;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Map, {\n        className: \"map\",\n        initialCenter: {\n          lat: 14.6091,\n          lng: 121.0223\n        },\n        google: this.props.google,\n        onClick: this.onMapClick,\n        onReady: this.onMapReady,\n        style: {\n          height: \"100%\",\n          position: \"relative\",\n          width: \"100%\"\n        },\n        zoom: 8\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pac-card\",\n        id: \"pac-card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"title\",\n            children: \"Add new point\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"pac-container\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"pac-input\",\n              type: \"text\",\n              placeholder: \"Enter a location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pac-card\",\n        id: \"pac-card2\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"title2\",\n            children: \"Add new point\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"pac-container2\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"pac-input2\",\n              type: \"text\",\n              placeholder: \"Enter a location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: 500,\n          height: 500\n        },\n        id: this.props.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"infowindow-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"\",\n          width: \"16\",\n          height: \"16\",\n          id: \"place-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"place-name\",\n          className: \"title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"place-address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"place-coord\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }, this);\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyBAVWVu8_U0FfwgBiHVN3q-G5uCQNBAj7Y'\n})(MapContainer);","map":{"version":3,"sources":["/Users/andrei/SublimeWorkspace/final-project-globo-gym/src/components/MapContainer.js"],"names":["React","Component","Map","GoogleApiWrapper","StandaloneSearchBox","MapContainer","onMapReady","mapProps","map","coords","name","title","lat","lng","id","waypoints","directionsService","props","google","maps","DirectionsService","directionsDisplay","DirectionsRenderer","setMap","start","end","length","request","origin","destination","travelMode","route","result","status","setDirections","card","document","getElementById","input","card2","input2","controls","ControlPosition","TOP_CENTER","push","TOP_RIGHT","autocomplete","places","Autocomplete","autocomplete2","bindTo","setFields","addListener","console","log","place","getPlace","geometry","window","alert","location","onMapClick","t","coord","latLng","lat1","lng1","render","height","position","width","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Map, GoogleApiWrapper, StandaloneSearchBox } from \"google-maps-react\";\n\n\nexport class MapContainer extends Component {\n\n    onMapReady = (mapProps, map) => {\n      let coords = [  {\n        name: \"Manila\",\n        title: \"Manila\",\n        lat: 42.356276,\n        lng: -71.096876,\n        id: 1,\n        },\n        {\n            name: \"Taguig\",\n            title: \"Taguig\",\n            lat: 42.348310,\n            lng: -71.081311,\n            id: 3,\n        },\n      ];\n      let waypoints = [];\n  \n      //instantiate directions service and directions renderer\n      const directionsService = new this.props.google.maps.DirectionsService();\n      const directionsDisplay = new this.props.google.maps.DirectionsRenderer();\n      //put directions renderer to render in the map\n      directionsDisplay.setMap(map);\n      //Getting the first coordinate in the array as the start/origin\n      let start = { lat: coords[0].lat, lng: coords[0].lng };\n      //Getting the last coordinate in the array as the end/destination\n      let end = {\n        lat: coords[coords.length - 1].lat,\n        lng: coords[coords.length - 1].lng,\n      };\n      \n      //putting all the coordinates between the first and last coordinate from the array as the waypoints\n    //   for (let i = 1; i < coords.length - 1; i++) {\n    //     waypoints.push({\n    //       location: { lat: coords[i].lat, lng: coords[i].lng },\n    //       stopover: true,\n    //     });\n    //   }\n  \n      // directions requests\n  \n      let request = {\n        origin: start,\n        waypoints: waypoints,\n        destination: end,\n        travelMode: \"BICYCLING\",\n      };\n\n      //show results in the directionsrenderer\n      directionsService.route(request, function (result, status) {\n        if (status == \"OK\") {\n          directionsDisplay.setDirections(result);\n        }\n      });\n\n      //setting the autocomplete input\n      let card = document.getElementById(\"pac-card\");\n      let input = document.getElementById(\"pac-input\");\n      let card2 = document.getElementById(\"pac-card2\");\n      let input2 = document.getElementById(\"pac-input2\");\n      map.controls[this.props.google.maps.ControlPosition.TOP_CENTER].push(card);\n      map.controls[this.props.google.maps.ControlPosition.TOP_RIGHT].push(card2);\n      let autocomplete = new this.props.google.maps.places.Autocomplete(input);\n      let autocomplete2 = new this.props.google.maps.places.Autocomplete(input2);\n  \n      // Bind the map's bounds (viewport) property to the autocomplete object,\n      // so that the autocomplete requests use the current map bounds for the\n      // bounds option in the request.\n      autocomplete.bindTo(\"bounds\", map);\n      autocomplete2.bindTo(\"bounds\", map);\n  \n      // Set the data fields to return when the user selects a place.\n      autocomplete.setFields([\"address_components\", \"geometry\", \"icon\", \"name\"]);\n      autocomplete2.setFields([\"address_components\", \"geometry\", \"icon\", \"name\"]);\n\n      //listener for the places input\n      autocomplete.addListener(\"place_changed\", () => {\n        console.log(waypoints);\n        let place = autocomplete.getPlace();\n        if (!place.geometry) {\n          // User entered the name of a Place that was not suggested and\n          // pressed the Enter key, or the Place Details request failed.\n          window.alert(\"No details available for input: '\" + place.name + \"'\");\n          return;\n        }\n        \n        //Putting the previous last coordinate in the array to be part of the waypoint\n        // waypoints.push({\n        //   location: {\n        //     lat: coords[coords.length - 1].lat,\n        //     lng: coords[coords.length - 1].lng,\n        //   },\n        //   stopover: true,\n        // });\n  \n        //putting the Place Autocomplete coordinate result in the coords array\n        coords[0] = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng(),\n        };\n        // //putting the Place Autocomplete coordinate result the value of the end/destination\n        // end = coords[1];\n        \n        //changing  request\n        request = {\n          origin: coords[0],\n          waypoints: waypoints,\n          destination: coords[1],\n          travelMode: \"BICYCLING\",\n        };\n        //creating new directions request\n        if (coords[0] !== null && coords[1] !== null) {\n            directionsService.route(request, function (result, status) {\n                if (status == \"OK\") {\n                    directionsDisplay.setDirections(result);\n                }\n            });\n        };\n\n\n      });\n\n  \n\n      this.onMapClick = (t, map, coord) => {\n          const { latLng } = coord;\n          const lat1 = latLng.lat();\n          const lng1 = latLng.lng();\n          if(coords[2].lat !== null && coords[3].lat !== null){\n            coords[2] = {\n              lat: lat1,\n              lng: lng1,\n            };\n            coords[3] = {\n              lat: null,\n              lng: null,\n            };\n          }\n          else if(coords[2].lat !== null && coords[3].lat === null){\n            coords[3] = {\n              lat: lat1,\n              lng: lng1,\n            };\n\n\n          };\n      };\n\n    //listener for the places input\n    autocomplete2.addListener(\"place_changed\", () => {\n        console.log(waypoints);\n        let place = autocomplete2.getPlace();\n        if (!place.geometry) {\n          // User entered the name of a Place that was not suggested and\n          // pressed the Enter key, or the Place Details request failed.\n          window.alert(\"No details available for input: '\" + place.name + \"'\");\n          return;\n        }\n        \n        //Putting the previous last coordinate in the array to be part of the waypoint\n        // waypoints.push({\n        //   location: {\n        //     lat: coords[coords.length - 1].lat,\n        //     lng: coords[coords.length - 1].lng,\n        //   },\n        //   stopover: true,\n        // });\n  \n        //putting the Place Autocomplete coordinate result in the coords array\n        coords[1] = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng(),\n        };\n        // //putting the Place Autocomplete coordinate result the value of the end/destination\n        // end = coords[1];\n        \n        //changing  request\n        request = {\n          origin: coords[0],\n          waypoints: waypoints,\n          destination: coords[1],\n          travelMode: \"BICYCLING\",\n        };\n        //creating new directions request\n        if (coords[0] !== null && coords[1] !== null) {\n            directionsService.route(request, function (result, status) {\n                if (status == \"OK\") {\n                    directionsDisplay.setDirections(result);\n                }\n            });\n        }\n      });\n    };\n  \n  \n    render() {\n      //if (!this.props.loaded) return <div>Loading...</div>;\n  \n      return (\n        <div>\n          <Map\n            className=\"map\"\n            initialCenter={{ lat: 14.6091, lng: 121.0223 }}\n            google={this.props.google}\n            onClick={this.onMapClick}\n            onReady={this.onMapReady}\n            style={{ height: \"100%\", position: \"relative\", width: \"100%\" }}\n            zoom={8}\n          ></Map>\n          <div className=\"pac-card\" id=\"pac-card\">\n            <div>\n              <div id=\"title\">Add new point</div>\n  \n              <div id=\"pac-container\">\n                <input\n                  id=\"pac-input\"\n                  type=\"text\"\n                  placeholder=\"Enter a location\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"pac-card\" id=\"pac-card2\">\n            <div>\n              <div id=\"title2\">Add new point</div>\n  \n              <div id=\"pac-container2\">\n                <input\n                  id=\"pac-input2\"\n                  type=\"text\"\n                  placeholder=\"Enter a location\"\n                />\n              </div>\n            </div>\n          </div>\n          <div style={{ width: 500, height: 500 }} id={this.props.id} />\n          <div id=\"infowindow-content\">\n            <img src=\"\" width=\"16\" height=\"16\" id=\"place-icon\" />\n            <span id=\"place-name\" className=\"title\"></span>\n            <br />\n            <span id=\"place-address\"></span>\n            <br />\n            <span id=\"place-coord\"></span>\n          </div>\n        </div>\n      );\n    }\n  }\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyBAVWVu8_U0FfwgBiHVN3q-G5uCQNBAj7Y'\n})(MapContainer);"]},"metadata":{},"sourceType":"module"}